{"created": 1723782805.0116713, "duration": 18.75087857246399, "exitcode": 1, "root": "C:\\Users\\izulhish\\Downloads\\audio-cnn", "environment": {}, "summary": {"passed": 13, "failed": 1, "total": 14, "collected": 14}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": ".", "type": "Dir"}]}, {"nodeid": "assets", "outcome": "passed", "result": []}, {"nodeid": "noise", "outcome": "passed", "result": []}, {"nodeid": "recorded", "outcome": "passed", "result": []}, {"nodeid": "tests/test_data_loading.py", "outcome": "passed", "result": [{"nodeid": "tests/test_data_loading.py::test_data_loading", "type": "Function", "lineno": 7}]}, {"nodeid": "tests/test_functionality.py", "outcome": "passed", "result": [{"nodeid": "tests/test_functionality.py::test_reference_sound_present", "type": "Function", "lineno": 6}, {"nodeid": "tests/test_functionality.py::test_reference_sound_not_present", "type": "Function", "lineno": 11}]}, {"nodeid": "tests/test_integration.py", "outcome": "passed", "result": [{"nodeid": "tests/test_integration.py::test_pipeline", "type": "Function", "lineno": 6}]}, {"nodeid": "tests/test_model_accuracy.py", "outcome": "passed", "result": [{"nodeid": "tests/test_model_accuracy.py::test_model_accuracy", "type": "Function", "lineno": 6}]}, {"nodeid": "tests/test_negative.py", "outcome": "passed", "result": [{"nodeid": "tests/test_negative.py::test_negative_cases", "type": "Function", "lineno": 5}]}, {"nodeid": "tests/test_performance.py", "outcome": "passed", "result": [{"nodeid": "tests/test_performance.py::test_model_inference_time", "type": "Function", "lineno": 7}]}, {"nodeid": "tests/test_regression.py", "outcome": "passed", "result": [{"nodeid": "tests/test_regression.py::test_regression", "type": "Function", "lineno": 5}]}, {"nodeid": "tests/test_reliability.py", "outcome": "passed", "result": [{"nodeid": "tests/test_reliability.py::test_model_reliability", "type": "Function", "lineno": 5}]}, {"nodeid": "tests/test_security.py", "outcome": "passed", "result": [{"nodeid": "tests/test_security.py::test_file_security", "type": "Function", "lineno": 4}]}, {"nodeid": "tests/test_underfitting_overfitting.py", "outcome": "passed", "result": [{"nodeid": "tests/test_underfitting_overfitting.py::test_underfitting_overfitting", "type": "Function", "lineno": 4}]}, {"nodeid": "tests/test_unit.py", "outcome": "passed", "result": [{"nodeid": "tests/test_unit.py::test_feature_extraction", "type": "Function", "lineno": 6}, {"nodeid": "tests/test_unit.py::test_labels_are_boolean", "type": "Function", "lineno": 16}, {"nodeid": "tests/test_unit.py::test_model_structure", "type": "Function", "lineno": 24}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/test_data_loading.py", "type": "Module"}, {"nodeid": "tests/test_functionality.py", "type": "Module"}, {"nodeid": "tests/test_integration.py", "type": "Module"}, {"nodeid": "tests/test_model_accuracy.py", "type": "Module"}, {"nodeid": "tests/test_negative.py", "type": "Module"}, {"nodeid": "tests/test_performance.py", "type": "Module"}, {"nodeid": "tests/test_regression.py", "type": "Module"}, {"nodeid": "tests/test_reliability.py", "type": "Module"}, {"nodeid": "tests/test_security.py", "type": "Module"}, {"nodeid": "tests/test_underfitting_overfitting.py", "type": "Module"}, {"nodeid": "tests/test_unit.py", "type": "Module"}]}, {"nodeid": ".", "outcome": "passed", "result": [{"nodeid": "assets", "type": "Dir"}, {"nodeid": "noise", "type": "Dir"}, {"nodeid": "recorded", "type": "Dir"}, {"nodeid": "tests", "type": "Dir"}]}], "tests": [{"nodeid": "tests/test_data_loading.py::test_data_loading", "lineno": 7, "outcome": "passed", "keywords": ["test_data_loading", "test_data_loading.py", "tests", "audio-cnn", ""], "setup": {"duration": 0.0003040001029148698, "outcome": "passed"}, "call": {"duration": 0.03299229999538511, "outcome": "passed"}, "teardown": {"duration": 0.0004393999697640538, "outcome": "passed"}}, {"nodeid": "tests/test_functionality.py::test_reference_sound_present", "lineno": 6, "outcome": "passed", "keywords": ["test_reference_sound_present", "test_functionality.py", "tests", "audio-cnn", ""], "setup": {"duration": 0.0003163000801578164, "outcome": "passed"}, "call": {"duration": 0.0922282999381423, "outcome": "passed", "stdout": "Step 1: Extracting MFCC features from the audio file...\nExtracted MFCC features shape: (1008, 13)\nMFCC (Mel-Frequency Cepstral Coefficients) are a representation of the short-term power spectrum of a sound, useful for distinguishing audio characteristics.\n\nStep 2: Padding or truncating MFCC features to a consistent length...\nPadded MFCC features shape: (174, 13)\nThis ensures that all audio samples have the same size input to the CNN, regardless of their original length.\n\nStep 3: Reshaping features for CNN input...\nInput shape for CNN: (1, 174, 13, 1)\nThe input is reshaped to fit the CNN's expected input format.\n\nStep 4: Making prediction using the CNN model...\n\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\nPrediction value: 1.0\nThreshold: 0.8\nThe prediction value indicates the model's confidence that the reference sound is present in the audio file. It is compared to a threshold to make a binary decision.\n"}, "teardown": {"duration": 0.00036700000055134296, "outcome": "passed"}}, {"nodeid": "tests/test_functionality.py::test_reference_sound_not_present", "lineno": 11, "outcome": "passed", "keywords": ["test_reference_sound_not_present", "test_functionality.py", "tests", "audio-cnn", ""], "setup": {"duration": 0.00026780006010085344, "outcome": "passed"}, "call": {"duration": 0.10743219999130815, "outcome": "passed", "stdout": "Step 1: Extracting MFCC features from the audio file...\nExtracted MFCC features shape: (1898, 13)\nMFCC (Mel-Frequency Cepstral Coefficients) are a representation of the short-term power spectrum of a sound, useful for distinguishing audio characteristics.\n\nStep 2: Padding or truncating MFCC features to a consistent length...\nPadded MFCC features shape: (174, 13)\nThis ensures that all audio samples have the same size input to the CNN, regardless of their original length.\n\nStep 3: Reshaping features for CNN input...\nInput shape for CNN: (1, 174, 13, 1)\nThe input is reshaped to fit the CNN's expected input format.\n\nStep 4: Making prediction using the CNN model...\n\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 33ms/step\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 33ms/step\nPrediction value: 2.958496679639211e-06\nThreshold: 0.8\nThe prediction value indicates the model's confidence that the reference sound is present in the audio file. It is compared to a threshold to make a binary decision.\n"}, "teardown": {"duration": 0.0004237999673932791, "outcome": "passed"}}, {"nodeid": "tests/test_integration.py::test_pipeline", "lineno": 6, "outcome": "passed", "keywords": ["test_pipeline", "test_integration.py", "tests", "audio-cnn", ""], "setup": {"duration": 0.00019809999503195286, "outcome": "passed"}, "call": {"duration": 0.14394320000428706, "outcome": "passed", "stdout": "\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step\n"}, "teardown": {"duration": 0.00029369990807026625, "outcome": "passed"}}, {"nodeid": "tests/test_model_accuracy.py::test_model_accuracy", "lineno": 6, "outcome": "passed", "keywords": ["test_model_accuracy", "test_model_accuracy.py", "tests", "audio-cnn", ""], "setup": {"duration": 0.000278900028206408, "outcome": "passed"}, "call": {"duration": 0.06308230001013726, "outcome": "passed", "stdout": "\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step\n"}, "teardown": {"duration": 0.0002829000586643815, "outcome": "passed"}}, {"nodeid": "tests/test_negative.py::test_negative_cases", "lineno": 5, "outcome": "passed", "keywords": ["test_negative_cases", "test_negative.py", "tests", "audio-cnn", ""], "setup": {"duration": 0.00022680009715259075, "outcome": "passed"}, "call": {"duration": 0.20407099998556077, "outcome": "passed", "stdout": "Step 1: Extracting MFCC features from the audio file...\nExtracted MFCC features shape: (5173, 13)\nMFCC (Mel-Frequency Cepstral Coefficients) are a representation of the short-term power spectrum of a sound, useful for distinguishing audio characteristics.\n\nStep 2: Padding or truncating MFCC features to a consistent length...\nPadded MFCC features shape: (174, 13)\nThis ensures that all audio samples have the same size input to the CNN, regardless of their original length.\n\nStep 3: Reshaping features for CNN input...\nInput shape for CNN: (1, 174, 13, 1)\nThe input is reshaped to fit the CNN's expected input format.\n\nStep 4: Making prediction using the CNN model...\n\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step\nPrediction value: 1.0525477591727395e-05\nThreshold: 0.8\nThe prediction value indicates the model's confidence that the reference sound is present in the audio file. It is compared to a threshold to make a binary decision.\n"}, "teardown": {"duration": 0.00041729991789907217, "outcome": "passed"}}, {"nodeid": "tests/test_performance.py::test_model_inference_time", "lineno": 7, "outcome": "passed", "keywords": ["test_model_inference_time", "test_performance.py", "tests", "audio-cnn", ""], "setup": {"duration": 0.00028730009216815233, "outcome": "passed"}, "call": {"duration": 0.0850569000467658, "outcome": "passed", "stdout": "Step 1: Extracting MFCC features from the audio file...\nExtracted MFCC features shape: (1008, 13)\nMFCC (Mel-Frequency Cepstral Coefficients) are a representation of the short-term power spectrum of a sound, useful for distinguishing audio characteristics.\n\nStep 2: Padding or truncating MFCC features to a consistent length...\nPadded MFCC features shape: (174, 13)\nThis ensures that all audio samples have the same size input to the CNN, regardless of their original length.\n\nStep 3: Reshaping features for CNN input...\nInput shape for CNN: (1, 174, 13, 1)\nThe input is reshaped to fit the CNN's expected input format.\n\nStep 4: Making prediction using the CNN model...\n\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 31ms/step\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 31ms/step\nPrediction value: 1.0\nThreshold: 0.8\nThe prediction value indicates the model's confidence that the reference sound is present in the audio file. It is compared to a threshold to make a binary decision.\n"}, "teardown": {"duration": 0.0004464000230655074, "outcome": "passed"}}, {"nodeid": "tests/test_regression.py::test_regression", "lineno": 5, "outcome": "passed", "keywords": ["test_regression", "test_regression.py", "tests", "audio-cnn", ""], "setup": {"duration": 0.00024069997016340494, "outcome": "passed"}, "call": {"duration": 0.08669939998071641, "outcome": "passed", "stdout": "Step 1: Extracting MFCC features from the audio file...\nExtracted MFCC features shape: (1008, 13)\nMFCC (Mel-Frequency Cepstral Coefficients) are a representation of the short-term power spectrum of a sound, useful for distinguishing audio characteristics.\n\nStep 2: Padding or truncating MFCC features to a consistent length...\nPadded MFCC features shape: (174, 13)\nThis ensures that all audio samples have the same size input to the CNN, regardless of their original length.\n\nStep 3: Reshaping features for CNN input...\nInput shape for CNN: (1, 174, 13, 1)\nThe input is reshaped to fit the CNN's expected input format.\n\nStep 4: Making prediction using the CNN model...\n\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\nPrediction value: 1.0\nThreshold: 0.8\nThe prediction value indicates the model's confidence that the reference sound is present in the audio file. It is compared to a threshold to make a binary decision.\n"}, "teardown": {"duration": 0.00040549994446337223, "outcome": "passed"}}, {"nodeid": "tests/test_reliability.py::test_model_reliability", "lineno": 5, "outcome": "passed", "keywords": ["test_model_reliability", "test_reliability.py", "tests", "audio-cnn", ""], "setup": {"duration": 0.00023529992904514074, "outcome": "passed"}, "call": {"duration": 0.18359050003346056, "outcome": "passed", "stdout": "Step 1: Extracting MFCC features from the audio file...\nExtracted MFCC features shape: (1008, 13)\nMFCC (Mel-Frequency Cepstral Coefficients) are a representation of the short-term power spectrum of a sound, useful for distinguishing audio characteristics.\n\nStep 2: Padding or truncating MFCC features to a consistent length...\nPadded MFCC features shape: (174, 13)\nThis ensures that all audio samples have the same size input to the CNN, regardless of their original length.\n\nStep 3: Reshaping features for CNN input...\nInput shape for CNN: (1, 174, 13, 1)\nThe input is reshaped to fit the CNN's expected input format.\n\nStep 4: Making prediction using the CNN model...\n\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 32ms/step\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 32ms/step\nPrediction value: 1.0\nThreshold: 0.8\nThe prediction value indicates the model's confidence that the reference sound is present in the audio file. It is compared to a threshold to make a binary decision.\nStep 1: Extracting MFCC features from the audio file...\nExtracted MFCC features shape: (1008, 13)\nMFCC (Mel-Frequency Cepstral Coefficients) are a representation of the short-term power spectrum of a sound, useful for distinguishing audio characteristics.\n\nStep 2: Padding or truncating MFCC features to a consistent length...\nPadded MFCC features shape: (174, 13)\nThis ensures that all audio samples have the same size input to the CNN, regardless of their original length.\n\nStep 3: Reshaping features for CNN input...\nInput shape for CNN: (1, 174, 13, 1)\nThe input is reshaped to fit the CNN's expected input format.\n\nStep 4: Making prediction using the CNN model...\n\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step\n\u001b[1m1/1\u001b[0m \u001b[32m\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step\nPrediction value: 1.0\nThreshold: 0.8\nThe prediction value indicates the model's confidence that the reference sound is present in the audio file. It is compared to a threshold to make a binary decision.\n"}, "teardown": {"duration": 0.00027249997947365046, "outcome": "passed"}}, {"nodeid": "tests/test_security.py::test_file_security", "lineno": 4, "outcome": "passed", "keywords": ["test_file_security", "test_security.py", "tests", "audio-cnn", ""], "setup": {"duration": 0.00022419996093958616, "outcome": "passed"}, "call": {"duration": 0.0006375000812113285, "outcome": "passed"}, "teardown": {"duration": 0.00019880000036209822, "outcome": "passed"}}, {"nodeid": "tests/test_underfitting_overfitting.py::test_underfitting_overfitting", "lineno": 4, "outcome": "failed", "keywords": ["test_underfitting_overfitting", "test_underfitting_overfitting.py", "tests", "audio-cnn", ""], "setup": {"duration": 0.0002462000120431185, "outcome": "passed"}, "call": {"duration": 0.00028200005181133747, "outcome": "failed", "crash": {"path": "C:\\Users\\izulhish\\Downloads\\audio-cnn\\tests\\test_underfitting_overfitting.py", "lineno": 10, "message": "AssertionError: Model is underfitting: Training loss is too high\nassert 1.1055376529693604 < 0.5"}, "traceback": [{"path": "tests\\test_underfitting_overfitting.py", "lineno": 10, "message": "AssertionError"}], "longrepr": "def test_underfitting_overfitting():\n        training_loss = history.history['loss']\n        validation_loss = history.history['val_loss']\n    \n        # Check for underfitting (high training and validation loss)\n>       assert training_loss[-1] < 0.5, \"Model is underfitting: Training loss is too high\"\nE       AssertionError: Model is underfitting: Training loss is too high\nE       assert 1.1055376529693604 < 0.5\n\ntests\\test_underfitting_overfitting.py:10: AssertionError"}, "teardown": {"duration": 0.00025749998167157173, "outcome": "passed"}}, {"nodeid": "tests/test_unit.py::test_feature_extraction", "lineno": 6, "outcome": "passed", "keywords": ["test_feature_extraction", "test_unit.py", "tests", "audio-cnn", ""], "setup": {"duration": 0.0002215999411419034, "outcome": "passed"}, "call": {"duration": 0.8144608999136835, "outcome": "passed"}, "teardown": {"duration": 0.00039219995960593224, "outcome": "passed"}}, {"nodeid": "tests/test_unit.py::test_labels_are_boolean", "lineno": 16, "outcome": "passed", "keywords": ["test_labels_are_boolean", "test_unit.py", "tests", "audio-cnn", ""], "setup": {"duration": 0.00023769994731992483, "outcome": "passed"}, "call": {"duration": 0.0003290000604465604, "outcome": "passed"}, "teardown": {"duration": 0.00028639996889978647, "outcome": "passed"}}, {"nodeid": "tests/test_unit.py::test_model_structure", "lineno": 24, "outcome": "passed", "keywords": ["test_model_structure", "test_unit.py", "tests", "audio-cnn", ""], "setup": {"duration": 0.0002766998950392008, "outcome": "passed"}, "call": {"duration": 0.00031679996754974127, "outcome": "passed"}, "teardown": {"duration": 0.0002367999404668808, "outcome": "passed"}}], "warnings": [{"message": "Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.", "category": "UserWarning", "when": "collect", "filename": "C:\\Users\\izulhish\\Downloads\\audio-cnn\\venv\\Lib\\site-packages\\keras\\src\\layers\\convolutional\\base_conv.py", "lineno": 107}]}